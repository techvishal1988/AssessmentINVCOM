name: .NET
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
defaults:
  run:
    working-directory: ./AssessmentINVCOM-main/INVCOM/Source/App/INVCOM.Serverless

jobs:
  build:
    runs-on: ubuntu-latest
    env: 
      working-directory: ./AssessmentINVCOM-main/INVCOM/Source/App/INVCOM.Serverless
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}   
      AWS_REGION: us-west-2
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Install AWS CLI v2
      run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2  
    - name: AWS CLI
      run: dotnet tool install -g Amazon.Lambda.Tools
    - name: Restore dependencies
      run: dotnet restore INVCOM.Serverless.csproj
    - name: Build
      run: dotnet build --no-restore INVCOM.Serverless.csproj         
    - name: Publish
      run: |
           ls
           dotnet publish -c Release -r linux-x64 -o publish
           dotnet lambda package
    - name: Upload to S3
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    - name: Zip Artifact
      run:  |
           find ./ -mindepth 1 -maxdepth 1 ! -name publish -type d -exec rm -r {} +
           cd publish 
           mv * ./../ 
           cd ..
           rm -rf publish/
           zip -r test1234.zip ./*   
    - name: Copy Artifact to S3
      run: aws s3 cp test1234.zip s3://rsys1234/ 
    - run: |
        aws lambda update-function-configuration \
        --function-name lambda123 \
        --environment Variables="{KEY1=123,KEY2=4567}" 
        
        aws lambda update-function-code \
        --function-name lambda123 \
        --s3-bucket rsys1234 \
        --s3-key test1234.zip \
        #--zip-file fileb://./test1234.zip
       #aws lambda update-function-configuration \
        #--function-name lambda123 \
        #--environment Variables="{KEY1=123,KEY2=4567}" \
        #--timeout 30 \
        #--memory-size 256
    - name: Create API Gateway
      run: |
          # Create the API Gateway
          api_id=$(aws apigateway create-rest-api --name lambda123 --description "Your API Description" --query 'id' --output text)

          # Get the root resource ID
          root_resource_id=$(aws apigateway get-resources --rest-api-id $api_id --query 'items[0].id' --output text)

          # Create a resource for the Lambda function
          resource_id=$(aws apigateway create-resource --rest-api-id $api_id --parent-id $root_resource_id --path-part YourResourcePath --query 'id' --output text)

          # Get the Lambda function ARN
          lambda_arn=$(aws lambda get-function --function-name lambda123 --query 'Configuration.FunctionArn' --output text)

          # Create an integration between the API Gateway and the Lambda function
          aws apigateway put-integration --rest-api-id $api_id --resource-id $resource_id --http-method POST --type AWS_PROXY --integration-http-method POST --uri "arn:aws:apigateway:${AWS_REGION}:lambda:path/2015-03-31/functions/${lambda_arn}/invocations"

          # Create a method for the resource
          aws apigateway put-method --rest-api-id $api_id --resource-id $resource_id --http-method POST --authorization-type NONE

          # Add the Lambda function as the integration for the method
          aws apigateway put-method-response --rest-api-id $api_id --resource-id $resource_id --http-method POST --status-code 200 --response-models "{}"

          # Deploy the API
          deployment_id=$(aws apigateway create-deployment --rest-api-id $api_id --stage-name stage --query 'id' --output text)

          # Output the API Gateway URL
          endpoint_url=$(aws apigateway get-stage --rest-api-id $api_id --stage-name stage --query 'invokeUrl' --output text)
          echo "API Gateway URL: $endpoint_url"
